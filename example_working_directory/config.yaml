### BEGIN REQUIRED CONFIGURATION SECTION. It is likely that every option in this section will need to be modified
#       for each analysis run. Become familiar with these options

# runs to be analyzed, organized into separate run 'tags'. Tags may not contain underscores.
runs:

    TrpB:
        # if sequences to be used are not provided as 'sequences/<yourRunTag>.fastq.gz, then either runname or fwdReads/rvsReads must be provided

        # Unique folder name in which batches of sequences are stored, to be merged together and processed. All sequences from this run will be retrieved, but only those that align to the reference sequence will be used
        #   Searches 2 directories deep within the 'minknowDir' (defined above) for the provided runname directories. If multiple runname directories are provided, all will be used
        runname:
            - 20220827_1323_MN35267_FAU75463_1d527443

        # Alternatively, file names for paired end reads can be used as input. These will be merged with the NGmerge tool prior to analysis
        #   Provided file names must both be present within the directory 'sequences/paired/'
        # fwdReads: seqsR1.fastq.gz
        # rvsReads: seqsR2.fastq.gz

        # fasta file that contains reference sequence in two or three forms: first is with barcode and UMI locations present, but marked by 'N's. This sequence is what each read will actually be aligned to
        #   second is trimmed such that each base is one for which mutation analysis is desired. For amplicon sequencing, this likely means only bases that were PCR amplified,
        #   as bases that are present in primers are likely not informative and will slightly obscure evaluation of certain results such as mutations per base, etc.
        #   Third sequence is the protein sequence to be analyzed, and is optional if the complete ORF is present in each read, see `auto_detect_longest_ORF`
        reference: TrpB-ref.fasta

        # 'splint' sequence for rolling circle amplification consensus sequence construction
        splint: cggagtcaattaggtcatacNNNYRNNNYRNNNYRNNNCACTCGCACTGACTCGATNNNNNNNCGTCTTTCTGAGACCAGGAGGTCTCAAGGACTGCNNNNNNNCGTGTAGAGACTGCGTAGGNNNYRNNNYRNNNYRNNNgatgacctatacataggaagatctatag

        # List of UMI contexts. Copy and paste from reference fasta sequence. First N and last N will be used to identify UMIs within each sequence.
        UMI_contexts:
            - NNNYRNNNYRNNNYRNNNCA
            - GGNNNYRNNNYRNNNYRNNN

        # list barcode types to be used for demultiplexing. Demux'd files are named according to these barcodes in the order provided
        barcodeInfo: # barcode types present within each sequence, distinguished by their location within the reference sequence, which are defined by the N's within the given context
            rvs: 
                context: NNNNNNNC                   # copy and paste from reference fasta sequence. Include just enough sequence on one or both sides to distinguish from other barcodes, more than is necessary will result in more barcodes being ignored due to indels
                fasta: 7merBarcodes.fasta        # fasta file containing barcode sequences, located in references_directory
                reverseComplement: False            # set to True if corresponding barcodes in fasta file are defined as the reverse complement of the top strand (e.g., the defined sequences are present as-is within a reverse primer that was used for PCR)
                hammingDistance: 1                  # maximum hamming distance from barcode in fasta file to increase leniency in barcode identification. If any two of barcodes within provided fasta file are within this hamming distance from each other, throws an error. Default, 0
            fwd:
                context: TNNNNNNN  
                fasta: 7merBarcodes.fasta
                reverseComplement: True
                hammingDistance: 1                

            lineage:
                context: NNNNNNNNNNNN
                fasta: lineageBarcodes.fasta
                reverseComplement: False
                hammingDistance: 0
                generate: all                       # Integer or 'all'.  if the fasta file does not already exist, automatically generates a fasta file from the provided sequencing data with this number of barcodes (ordered by prevalence) or all identified barcodes
                noSplit: True                       # if set to True, the identity of this barcode will be recorded in some outputs such as genotypes, but will not be used to split sequences into distinct files,
                                                        # and cannot be used in barcodeGroups to name output and plots. Default, False

        # timepoints provided as .csv file that provides the tag and barcode combinations for timepoints of an experiment. This can be used for generating mutation spectrum and mutation rate plots.
        #   Output files will be labelled with this tag. the timepoints csv can use barcode groups from other tags, but different tags that use the same timepoints csv file
        #   will only yield one output file of each type.
        timepoints: timepoints.csv

        # barcodeGroups provided either as a .csv file or a dictionary. For .csv input, see the example barcodeGroups.csv
        #   For dictionary import, a commented-out example is provided. All barcode types must be defined in barcodeInfo
        #   All barcode names must be present in the provided barcode fasta file for a given barcode type
        #   Barcode group names may not contain underscores.
        barcodeGroups: barcodeGroups.csv
        #barcodeGroupName:  
        #   fwd: bc1
        #   rvs: bc2

        NT_muts_of_interest: 'T1221A'                      # comma separated list of specific nucleotide mutations to be added to genotypes output. If not needed, set as 'False'. For comma separated list of length L, L+1 columns will be added to genotype output. One column to encode all mutations of interest as a list, and one column for each mutation of interest for one-hot encoding
        AA_muts_of_interest: 'R60H'                        # same as above except for AA mutations


### END REQUIRED CONFIGURATION SECTION. After this point most settings may not need to be changed for a given analysis run,
#       though you should become familiar with settings in sections for parts of the pipeline you will be using, especially any consensus sequence steps 







### begin nanopore only section ###
# path to minknow directory containing nanopore sequencing data. In this example directory we use a relative path, but this should be replaced with an absolute path to a location
#   where sequences are typically stored so that it does not need to change every time a new working directory is made for a new experiment
minknowDir: data
fastq_dir: fastq_pass, fastq_fail           # comma separated list of folders within the run folder to pull fastq files from. Normally either 'fastq_pass' or 'fastq_pass, fastq_fail'

# medaka
medaka_model: 'r104_e81_sup_variant_g610'      # Model for medaka to use. Use `medaka smolecule --help` to see all available model options. Maple uses a reference-guided approach, so the appropriate variant model should be used, eg r103_sup_variant_g507
medaka_flags: '--quiet'        # flags to add to medaka smolecule command call. threads, chunk-len, and model flags are already added.

### end nanopore only section ###

nanopore: True      # Set to true if sequencing data is derived from ONT nanopore platform

references_directory: ref   # directory name for reference files, located in working directory

# threads per processing batch, if given enough threads with -j n multiple
# batches run in parallel. Also used as resource for cluster jobs.
# Recommended to provide the maximum number of available threads for threads_alignment, minimum 3.
threads_medaka: 2
threads_alignment: 4
threads_samtools : 1
threads_demux: 4

# paired end read merging with NGmerge. To view available flags and other documentation for this tool, use 'NGmerge --help'
merge_paired_end: False            # set to True if merging of paired end reads is needed, and paired end read filenames are provided for all run tags
NGmerge_flags: '-m 10'             # command line flags to add to NGmerge command. -m X sets the minimum allowable overlap of paired end reads to X. Examine NGmerge documentation for usage if amplicons are shorter than both mates of a paired end read

# NanoPlot. To view available flags and other documentation for this tool, use 'NanoPlot --help'
nanoplot: False
nanoplot_flags: '--plots dot'  # command line flags that will be added to all nanoplot function calls. -o and -p are already added

# RCA consensus using C3POa. To view available flags and other documentation for this tool, use 'python -m C3POa --help'
peak_finder_settings: 40,3,9,2  # settings used to identify splint alignment locations for splitting read into subreads
RCA_batch_size: 10000           # number of sequences to batch together in each subprocess. If RCA processing crashes, lowering this number can help
RCA_consensus_minimum: 3        # inclusive minimum number of complete subreads that will be used to generate an RCA consensus read. C3POa only counts complete repeats (i.e. flanked on both sides by the splint sequence), so filtering is based on both the number of repeats found by C3POa and the length of the original RCA read
RCA_consensus_maximum: 20       # inclusive maximum number of complete subreads that will be used to generate an RCA consensus read. RCA reads with more than this number of subreads will not be used. Note that this behavior differs slightly from that of UMI_consensus_maximum

# UMI clustering and consensus
UMI_mismatches: 4               # maximum allowable number of mismatches that UMIs can contain and still be grouped together. If set to 2, UMI grouping may consume on the order of 100 gb of memory. Setting to 1 may consume on the order of 1 gb of memory.
UMI_consensus_minimum: 1       # inclusive minimum number of subreads that will be used to generate a UMI consensus read
UMI_consensus_maximum: 1       # inclusive maximum number of subreads that will be used to generate a UMI consensus read. UMI groups with more subreads than this value 'n' will be downsampled to 'n' subreads
UMI_medaka_batches: 1          # number of files to split BAM file into prior to running medaka. Number can be raised if medaka throws an error. Unfortunately necessary workaround for a memory-related error in medaka stitch.                       

# alignment
# alignment flags for samtools. To view available flags and other documentation for this tool, use 'samtools --help'
alignment_samtools_flags: ''
# command line flags for minimap2 DNA alignment. To view available flags and other documentation for this tool, use 'minimap2 --help'
alignment_minimap2_flags: '-a -A2 -B4 -O4 -E2 --end-bonus=30 --secondary=no'   # string or dict, flags that will be added to the minimap2 command. Default options are good for targeted sequencing, minimizes gaps.
                                                                                    #   can also supply a dict for cases where you want to use different alignment settings for different tags, like so:
                                                                                    #       alignment_minimap2_flags:
                                                                                    #           tag1: '-a -A2 -B4 -O4 -E2 --secondary=no'
                                                                                    #           tag2: '-a -A2 -B4 -O10 -E4 --secondary=no'

# demultiplexing
demux_screen_no_group: True   # set to True if demuxed sequences that are not assigned a named barcode group should be blocked from subsequent analysis steps
demux_screen_failures: True  # Set to true if sequences that fail barcode detection for any of the barcodes should be blocked from subsequent analysis steps. If demux_screen_no_group is set to True, this option will not change any results
demux_threshold: 0.01          # threshold for carrying through to subsequent rules. To be processed further, a demultiplexed file must contain at least this proportion of the total number of reads in the .fastq file being demultiplexed.

# mutation analysis
mutation_analysis_quality_score_minimum: 5 # Minimum quality score needed for mutation to be counted. For amino acid level analysis, all nucleotides in the codon must be above the threshold for the mutation to be counted
sequence_length_threshold: 0.1              # Proportion of sequence length to be used as threshold for discarding sequences that are of abberant length. Ex. if set to 0.1 and length of trimmed reference sequence is 1000 bp, then all sequences either below 900 or above 1100 bp will not be analyzed
highest_abundance_genotypes: 10                # int, number of most frequently appearing genotypes to find a representative sequence for and write the alignment (output of clean_alignment method) to a file. Sequence with the highest average quality score will be chosen. 
genotype_ID_alignments: 0                # similar to above, but a comma separated list of genotype IDs. Will be included in the same output file as the highest abundance genotypes. set to 0 if not desired
mutations_frequencies_raw: False            # If set to True, outputs mutation frequencies as raw counts, instead of dividing by total sequences
analyze_seqs_w_frameshift_indels: True      # Set to true if sequences containing frameshift indels should be analyzed

# mutation statistics
unique_genotypes_count_threshold: 5         # minimum number of reads of a particular genotype for that genotype to be included in unique genotypes count

# plot_mutation_distributions
NT_distribution_plot_x_max: 20                    # maximum x value to show for all nucleotide mutation distribution plots
AA_distribution_plot_x_max: 10                    # maximum x value to show for all amino acid mutation distribution plots

# settings for dms view, which visualizes mutations onto a protein structure. These settings are required if a valid input file for that tool is desired
    # Data for all sample+barcode combinations will be converted to the proper format and output as dms_view_table.csv. See https://dms-view.github.io/ for instructions on how to use the tool
#     # To use, all tags must use the same protein sequence and .pdb file
# dms_view_chain: A    # chain(s) in .pdb file being used. Numbering should coincide with numbering of protein sequence mutation analysis. If more than one, separate with spaces
# dms_view_chain_numbering_difference: 0   # difference in numbering between protein chain in structure and amino acid level analysis. ex. if numbering for AA analysis starts at residue corresponding to residue 10 on the crystal structure, set to 10

# plot_mut_spectrum
#   barcode group name to be used as the background for analyses that require subtraction of sequencing error
#   To use, this barcode group name must be present within all sample tags being analyzed.
#   This is to prevent using a background sequencing error from a different sequencing run than the sample.
#   Comment out if not using
background: False
uniques_only: False      # if set to True, only uses unique mutations to determine mutation spectrum

# plot mutation diversity (hamming distance and genotypes plots)
diversity_plot_all: False                                   # set to True if diversity plotting should be done for all tag/barcode combinations
diversity_plot_downsample: False                             # int, if the number of unique genotypes is above this number, then genotypes will be downsampled to this number. This can dramatically speed up hamming distance calculation at the cost of not capturing all sequences. Set to False or 0 to use all genotypes
diversity_plot_hamming_distance_edge_limit: 10              # maximum hamming distance between two sequences for an edge to be drawn between them. If int, will use the provided number. if string in the format 'x/N' (e.g. x/4), will divide the median (x) by N to determine the edge limit. Slightly less than the median pairwise hamming distance usually works well. Highly connected graphs may fail to render and can be harder to interpret, so lower is probably better in most cases. If set to False, the median pairwise hamming distance will be used as a maximum instead.
hamming_distance_distribution_plot_x_max: 40                 # maximum x value to show for all HD distribution plots
genotypes2D_plot_point_size_col: count                         # genotypes column to use for node size. must be numerical. default, count
genotypes2D_plot_point_size_range: 30, 60                 # comma separated pair of integers, minimum and maximum point size to be used on the genotypes2D plot. If all values in 'genotypes_plot_point_size_col' are the same, the minimum size will be used 
genotypes2D_plot_point_color_col: barcode(s)       # genotypes column to use for color of data points. any genotypes column is an option, though some are obviously bad choices. numerical columns will be colored continuously from white to deep blue, categorical columns will be colored as rainbow. default, NT_substitutions_count